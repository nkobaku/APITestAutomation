plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

}

group = 'com.devopslabs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()

}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-logging'

    implementation "org.apache.poi:poi-ooxml:${apachePoiVersion}"
    implementation "org.apache.poi:poi:${apachePoiVersion}"
    implementation "com.github.ozlerhakan:poiji:${poijiVersion}"
    implementation "io.github.millij:poi-object-mapper:${poiObjectMapperVersion}"

    implementation "org.freemarker:freemarker:${freemarkerVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jacksonDataformatCsvVersion}"
    implementation "org.apache.commons:commons-collections4:${commonsCollections4Version}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"

    implementation "io.cucumber:cucumber-java:${cucumberVersion}"
    implementation "io.cucumber:cucumber-java8:${cucumberVersion}"
    implementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    implementation "io.cucumber:cucumber-spring:${cucumberVersion}"
    implementation "io.cucumber:cucumber-testng:${cucumberVersion}"

    implementation "net.masterthought:cucumber-reporting:${masterthoughtVersion}"
    implementation "de.monochromata.cucumber:reporting-plugin:${monochromataVersion}"
    implementation "io.springfox:springfox-boot-starter:${springfoxVersion}"
    implementation 'org.projectlombok:lombok:1.18.22'

    //implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jSlf4jVersion}"

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.projectlombok:lombok:1.18.22'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    implementation "io.rest-assured:json-schema-validator:${restAssuredVersion}"
    implementation "io.rest-assured:json-path:${restAssuredVersion}"
    implementation "io.rest-assured:xml-path:${restAssuredVersion}"

    implementation "ch.qos.logback.contrib:logback-jackson:${logbackJsonClassicVersion}"
    implementation "ch.qos.logback.contrib:logback-json-classic:${logbackJsonClassicVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackClassicVersion}"

    implementation "org.uncommons:reportng:${uncommonsReportingVersion}"


    implementation "com.github.mkolisnyk:cucumber-reports:${mkolisnykCucumberReports}"

    // Report Portal
    implementation "com.epam.reportportal:client-java:5.1.10"
    implementation "com.epam.reportportal:agent-java-cucumber5:5.1.2"
    implementation "com.epam.reportportal:agent-java-testng:5.1.2"

    implementation "com.epam.reportportal:commons-model:5.7.0"
    implementation 'com.epam.reportportal:logger-java-log4j:5.1.4'








}


tasks.named('test') {
    useJUnitPlatform()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    cucumberRuntime {
        //extendsFrom testImplementation
        extendsFrom implementation
    }
}
// '--tags', System.getProperty("tags"),
task cucumber() {
    dependsOn assemble, compileJava, compileTestJava
    //ignoreExitValue = true
    doLast {
        javaexec {
            systemProperties System.properties
            jvmArgs = ['-Xms512m', '-Xmx512m']
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [

                    '--plugin', 'pretty', '--strict',
                    '--plugin', 'usage:target/cucumber/usage.json',
                    '--plugin', 'html:target/cucumber',
                    '--plugin', 'json:target/cucumber/cucumber.json',
                    '--plugin', 'de.monochromata.cucumber.report.PrettyReports:target/cucumber/pretty-cucumber',
                    "--plugin", "com.epam.reportportal.cucumber.StepReporter",
                    '--glue', 'com.devopslabs.apitestautomation.stepdefs',
                    '--glue', 'com.devopslabs.apitestautomation.hooks',
                    'src/test/resources'
            ]
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {

    useTestNG() {
        options {
            listeners << 'org.uncommons.reportng.HTMLReporter'
            listeners << 'org.uncommons.reportng.JUnitXMLReporter'
        }
        suites 'src/test/resources/TestNG.xml'
    }



    //workingDir = 'target/'

    systemProperties = System.properties
    ignoreFailures = true
    scanForTestClasses = false
    outputs.upToDateWhen { false }

    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }


    systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")
    // set heap size for the test JVM(s)
    minHeapSize = "512m"
    maxHeapSize = "512m"

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }

}

task cleanTargetFolder(type: Delete) {
    println 'Cleaning target folder'
    delete "${projectDir}/target/"
}


/*clean {
    doFirst {
        delete 'target'
    }
}*/

tasks.clean.dependsOn(tasks.cleanTargetFolder)


